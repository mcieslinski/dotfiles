#!/bin/bash

# Personal aliases
alias rpro=". /home/michael/.profile"
alias rn="rename"
alias aliases="vim /home/michael/.bash_aliases; source /home/michael/.bash_aliases"
alias firefox="noterm firefox"
alias vivaldi="noterm vivaldi"
alias chrome="noterm google-chrome"
alias google-chrome="noterm google-chrome"
alias qt="noterm /opt/Qt5.5.0/Tools/QtCreator/bin/qtcreator.sh"
alias gedit="noterm /usr/bin/gedit"
alias makeroute="sudo route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0"
#alias ccmake="cmake-gui"
alias ccache="vim CMakeCache.txt"
alias gitk="noterm gitk"
alias grep="grep --color=auto --exclude='.*.swp'"

# VICTORY aliases
export VICTORY_ROOT="/home/michael/VICTORY"
alias v="cd ${VICTORY_ROOT}"
alias vb="cd ${VICTORY_ROOT}/build/bin"
alias vbuild="cd ${VICTORY_ROOT}/build"
alias vs="cd ${VICTORY_ROOT}/src"
alias va="cd ${VICTORY_ROOT}/app"
export NAS="/mnt/VICTORY_SIL_NAS/"
alias nas="cd ${NAS}"
alias nascheck="ping -c 3 192.168.1.53"

# VECTOR aliases
export VECTOR_ROOT="/home/michael/VMSTUFF/vector"
alias ve="cd ${VECTOR_ROOT}"
alias vec="cd ${VECTOR_ROOT}/trunk/common"
alias vej="cd ${VECTOR_ROOT}/trunk/common/j2a"
alias vebuild="cd ${VECTOR_ROOT}/build"

# VMD Aliases
export VMD_WORK_ROOT=${HOME}/vmd_workspace
export VMD_MCU_ROOT=${VMD_WORK_ROOT}/mcu
alias vtimono="cd ${VMD_MCU_ROOT}/builds/vmd/modules/tms570lc43xx/examples/timono"
alias vtilwip="cd ${VMD_MCU_ROOT}/builds/vmd/modules/tms570lc43xx/examples/tilwip"
alias vtiring="cd ${VMD_MCU_ROOT}/builds/vmd/modules/tms570lc43xx/examples/tiring"
alias vtidio="cd ${VMD_MCU_ROOT}/builds/vmd/modules/tms570lc43xx/examples/tidio"
alias vvpmc="cd ${VMD_MCU_ROOT}/builds/vmd/products/vpmc"
alias vproto="cd ${VMD_WORK_ROOT}/builds/tsproto"

# $1 = root build dir
# $2 = toolchain
# $3 = clean build?
function mcubuild_old()
{
    if [ ! -d ${HOME}/${1}/vmd/cmakemodules ]; then
        echo "Need to supply directory to use as root."
        return 1
    fi
    clean_build=false
    debug_build=false
    if [ "${3}" = "clean" ] || [ "${4}" = "clean" ]; then
        echo "Clean build."
        clean_build=true
    fi
    if [ "${3}" = "debug" ] || [ "${4}" = "debug" ]; then
        echo "Debug build."
        debug_build=true
    fi
    root_dir="${HOME}/${1}"
    echo "Building from: ${root_dir}"

    retdir=$(pwd)
    cd ${root_dir}/vmd/scripts/build_scripts/local_build_scripts
    ./build_all --mcu ${root_dir}/tsmicro ${root_dir}/tscore ${root_dir}/tsproto ${root_dir}/vmd ${root_dir}/vmd/cmakemodules/${2} $(${clean_build} && echo "--clean") $(${debug_build} && echo "--debug")
    local err=${?}
    cd ${retdir}
    return ${err}
}

function tibuild_old()
{
    export ARM_CROSS_TOOLCHAIN="/opt/gcc-linaro-7.2.1-2017.11-x86_64_armeb-eabi"
    export ARM_CROSS_TOOLCHAIN="/opt/gregchain"
    echo "Building TI..."
    mcubuild_old ${1} TIToolchain.cmake ${2} ${3}

    for i in $(find ${HOME}/vmd_workspace -iname '*.elf'); do
        #cp ${i} /mnt/hgfs/VMSTUFF/$(basename ${i%.elf}.out)
        cp ${i} ${HOME}/$(basename ${i%.elf}.out)
    done
    for i in $(find ${HOME}/vmd_workspace -iname '*.bin'); do
        #cp ${i} /mnt/hgfs/VMSTUFF/$(basename ${i%.elf}.out)
        cp ${i} ${HOME}
    done
}


# $1 = root build dir
# $2 = toolchain
# $3 = clean build?
function mcubuild()
{
    if [ ! -d ${HOME}/${1}/vmd/cmakemodules ]; then
        echo "Need to supply directory to use as root."
        return 1
    fi
    clean_build=false
    debug_build=true
    if [ "${3}" = "clean" ] || [ "${4}" = "clean" ]; then
        echo "Clean build."
        clean_build=true
    fi
    if [ "${3}" = "nodebug" ] || [ "${4}" = "nodebug" ]; then
        echo "Debug build OFF."
        debug_build=false
    fi
    root_dir="${HOME}/${1}"
    echo "Building from: ${root_dir}"

    retdir=$(pwd)
    cd ${root_dir}/vmd/scripts/build_scripts/local_build_scripts
    ./build_all --mcu ${root_dir}/tsmicro ${HOME}/rsccore ${HOME}/rsccomms ${root_dir}/tsproto ${root_dir}/vmd ${root_dir}/vmd/cmakemodules/${2} $(${clean_build} && echo "--clean") $(${debug_build} && echo "--debug")
    local err=${?}
    cd ${retdir}
    return ${err}
}

function tibuild()
{
    export ARM_CROSS_TOOLCHAIN="/opt/gcc-linaro-7.2.1-2017.11-x86_64_armeb-eabi"
    export ARM_CROSS_TOOLCHAIN="/opt/gregchain"
    echo "Building TI..."
    mcubuild ${1} TIToolchain.cmake ${2} ${3}

    for i in $(find ${HOME}/vmd_workspace -iname '*.elf'); do
        #cp ${i} /mnt/hgfs/VMSTUFF/$(basename ${i%.elf}.out)
        cp ${i} ${HOME}/$(basename ${i%.elf}.out)
    done
    for i in $(find ${HOME}/vmd_workspace -iname '*.bin'); do
        #cp ${i} /mnt/hgfs/VMSTUFF/$(basename ${i%.elf}.out)
        cp ${i} ${HOME}
    done
}

function tijtag()
{
    local addrpart=""
    local ippart=""
    if [ ! -z ${1} ]; then
        ping -c 1 ${1} &> /dev/null
        
        if [ ${?} -ne 0 ]; then
            echo "Pls give a good IP address."
            return 1
        else
            addrpart="${1}"
            ippart="-ip"
        fi
    fi

    set -x
    JLinkExe ${ippart} ${addrpart} -if jtag -JTagConf '-1,-1' -device TMS570LC4357ZWT
}

function tiprogram()
{
    local bin=${1}.bin
    test -e ${bin} || { echo "File ${bin} doesn't exist. Try again."; return 1; }
    local absfile=$(echo "$(cd "$(dirname "${bin}")" && pwd)/$(basename "${bin}")")

    local addrpart=""
    local ippart=""
    if [ ! -z ${2} ]; then
        ping -c 1 ${2} &> /dev/null
        
        if [ ${?} -ne 0 ]; then
            echo "Pls give a good IP address."
            return 1
        else
            addrpart="${2}"
            ippart="-ip"
        fi
    fi

    absfile=$(echo ${absfile} | sed 's|/|\\/|g')
    local nufile=${HOME}/tiflasher.jlink
    sed "s/fullpathname/${absfile}/" ${HOME}/herc.jlink > ${nufile} 2>/dev/null
    JLinkExe -if jtag -JTagConf '-1,-1' -device TMS570LC4357ZWT -CommanderScript ${nufile} ${ippart} ${addrpart}
    #JLinkExe -if jtag -JTagConf '-1,-1' -device TMS570LC4357ZWT -CommanderScript ${HOME}/herc.jlink ${ippart} ${addrpart}
}

function tigdbserver()
{
    local ip="${1}"
    local selectval=""

    if [ ! -z ${ip} ]; then
        ping -c 1 ${ip} &> /dev/null

        if [ ${?} -ne 0 ]; then
            echo "Pls give a good IP address."
            return 1
        else
            /opt/SEGGER/JLink/JLinkGDBServerCLExe -select ip=${ip} -device TMS570LC4357ZWT -endian big -if JTAG -speed auto -noir -noLocalhostOnly
            return 0
        fi
    fi
    
            /opt/SEGGER/JLink/JLinkGDBServerCLExe -device TMS570LC4357ZWT -endian big -if JTAG -speed auto -noir -noLocalhostOnly
}

function tigdb()
{
    /opt/gregchain/bin/armeb-eabi-gdb --command=${HOME}/tigdb.cmd ${1}
}

function atbuild()
{
    export ARM_CROSS_TOOLCHAIN="/opt/arm-none-eabi"
    echo "Building Atmel..."
    mcubuild ${1} AtmelToolchain.cmake ${2} ${3}
}

function atprogram()
{
    test -e ${1} || echo "Given: ${1}. Need to supply hex or bin for atmel."
    /usr/local/bin/edbg -e -p -v -f ${1} -t atmel_cm7 -b
}

function atverify()
{
    test -e ${1} || echo "Given: ${1}. Need to supply hex or bin for atmel."
    /usr/local/bin/edbg -v -f ${1} -t atmel_cm7 -b
}

function atfuse()
{
    case ${1} in
        read)
            /usr/local/bin/edbg -F r,:, -t atmel_cm7 -b
            ;;
        default)
            /usr/local/bin/edbg -F w,7:0,0x42 -t atmel_cm7 -b
            ;;
        *)
            echo "Given ${1}. Options are read, default."
            ;;
    esac
}

function aterase()
{
    /usr/local/bin/edbg -e -t atmel_cm7 -b
}

function download()
{
    if [ -z $2 ]; then
        wget -c $1 -P ~/Downloads
    else
        if [ -d $2 ]; then
            wget -c $1 -P $2
        else
            echo "Specified download location no existy."
            return 1
        fi
    fi
}

function secho()
{
    if [ $# -eq 2 ]; then
        echo -ne $1 > $2
    else
        echo "Usage: secho <data> <serial/port/path>"
    fi
}

function noterm()
{
    (nohup $@ &) &> /dev/null
}

function extract()
{
    nargs=$#;

    if [[ $# -ne 1 && $# -ne 2 ]]; then
        echo "Ya dun goofed. Usage: untar archive [directory]"
        return 1
    else
        filename=""
        filetype=""
        directory=""
        extractCommand=""

        echo $1 | grep -E "*\.tar\.gz" &> /dev/null && echo "Found gz!" && filename=$1 && filetype="z" && extractCommand="tar -${filetype}xf"
        echo $1 | grep -E "*\.tgz" &> /dev/null && echo "Found gz!" && filename=$1 && filetype="z" && extractCommand="tar -${filetype}xf"
        echo $1 | grep -E "*\.tar\.bz2" &> /dev/null && echo "Found bz2!" && filename=$1 && filetype="j" && extractCommand="tar -${filetype}xf"
        echo $1 | grep -E "*\.tbz" &> /dev/null && echo "Found bz2!" && filename=$1 && filetype="j" && extractCommand="tar -${filetype}xf"
        echo $1 | grep -E "*\.zip" &> /dev/null && echo "Found zip!" && filename=$1 && filetype="zip" && extractCommand="unzip"
        
        if [[ "$filetype" != "z" && "$filetype" != "j" && "$filetype" != "zip" ]]; then
            echo "Ya dun goofed. No tar or zip found."
            return 1
        else
            if [[ $# -eq 2 ]]; then
                if [[ -d $2 ]]; then
                    if [[ "${filetype}" = "z" || "${filetype}" = "j" ]]; then
                        directory="-C ${2}"
                    else
                        directory="-d ${2}"
                    fi
                else
                    echo "Ya dun goofed. ${2} is not a valid directory."
                    return 1
                fi
            fi
            ${extractCommand} ${filename} ${directory}
        fi
    fi
}

vrun()
{
    if [[ -d ${VICTORY_ROOT} || "${2}" = "--force" ]]; then
        if [[ $# -ne 1 && $# -ne 2 && $# -ne 3 ]]; then
            echo "Wrong number of arguments.    Usage: vrun ServiceName [--force/--gdb]   Example: vrun AttributeStore"
            return 1
        else
            use_dir=${VICTORY_ROOT}
            debug_mode=
            go_back=0
            test "${2}" = "--force" -o "${3}" = "--force" && use_dir=$(pwd)
            test "${2}" = "--gdb" -o "${3}" = "--gdb" && debug_mode="gdb --args " 
            test "$(pwd)" != "${use_dir}" && cd ${use_dir} && go_back=1
            #test -d ${use_dir} && echo "Found VICTORY directory environment variable."

            service_name="build/bin/$(ls ./build/bin | grep "$1")"
            test -f $service_name; test $? -eq 1 && echo "${service_name} does not exist" && return 2
            service_cfg="cfg/$(ls ./cfg | grep "$1")"
            test -e $service_cfg; test $? -eq 1 && echo "${service_cfg} does not exist" && return 2
            service_vclid="cfg/VCLID/$(ls ./cfg/VCLID | grep "$1")"
            test -e $service_vclid; test $? -eq 1 && echo "${service_vclid} does not exist" && return 2
            $debug_mode $service_name $service_cfg $service_vclid
            #echo $debug_mode $service_name $service_cfg $service_vclid
            test $go_back -eq 1 && cd - &> /dev/null
        fi
    else
        echo "No VICTORY_ROOT environment variable defined. Please run export VICTORY_ROOT=\"path/to/VICTORY\""
        echo "Option 2: Navigate to your VICTORY directory and run with --force"
    fi
}

function bak()
{
    if [[ $# -ne 1 ]]; then
        echo "You're doing it wrong. Usage: bak <filename>"
    else
        cp ${1} "${1}.bak"
    fi
}

function unbak()
{
    if [[ $# -ne 1 ]]; then
        echo "You're doing it wrong. Usage: unbak <filename>.bak"
    else
        echo ${1} | grep ".bak" &> /dev/null
        
        if [[ $? -ne 0 ]]; then
            echo "You're doing it wrong. File doesn't have .bak."
        else
            mv ${1} "${1%.*}"
        fi
    fi
}

function vv()
{
    theCommand=""
    firstLoop=0
    firstFile=""

    for i in $(ls *.cpp); do
        if [[ $firstLoop -eq 0 ]]; then
            firstLoop=1

            if [[ -e "${i%%.*}.h" ]]; then
                firstFile="e ${i%%.*}.h|vs|e ${i}|"
            elif [[ -e "../../../include/${i%%.*}.h" ]]; then
                firstFile="e ../../../include/${i%%.*}.h|vs|e ${i}|"
            else
                firstFile="e ${i}|"
            fi
        else
            if [[ -e "${i%%.*}.h" ]]; then
                theCommand+="tabe ${i%%.*}.h|vs|e ${i}|"
            elif [[ -e "../../../include/${i%%.*}.h" ]]; then
                theCommand+="tabe ../../../include/${i%%.*}.h|vs|e ${i}|"
            else
                theCommand+="tabe ${i}|"
            fi
        fi
    done
    
    vim --cmd "${firstFile}${theCommand}echom \"OPEN LOL.\""

    return 0;
}


function far()
{
    if [[ $# -eq 0 ]]
    then
        echo "--- Rules of far() ---"
        echo "File search:"
        echo "    -Enter a filter like *.java"
        echo "In-file text search:"
        echo "    -Escape any \"/\"."
        echo "    -Escape any symbols interpreted by bash, such as \"\\\". ex: \"\\n\" must be entered as \"\\\\n\"."
        echo "Replace text:"
        echo "    -Escape any \"/\""
        echo "    -Escape any symbols interpreted by bash, such as \"\\\". ex: \"\\n\" must be entered as \"\\\\n\"."
        echo 
        echo "--- File search step ---"
        echo "File: "
        read first
        echo 
        echo "--- Search step ---"
        read second
        echo 
        echo "--- Replace step ---"
        read third
        echo
        echo "Command to be executed:"
        echo "find . -name \"${first}\" -exec sed -i \"s/${second}/${third}/g\" {} \\;"
        echo "Continue? (y/n)"
        read confirmation
        if [[ "${confirmation}" = y || "${confirmation}" = Y ]]; then
            find . -name "${first}" -exec sed -i "s/${second}/${third}/g" {} \;
        else
            echo "Exiting..."
            return 2;
        fi
    elif [[ $# -eq 3 ]]
    then
        find . -name "${1}" -exec sed -i "s/${2}/${3}/g" {} \;
        return 0
    else
        echo "far: Too few arguments."
        return 1
    fi
}
